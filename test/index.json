{"external:bluebird":{"name":"bluebird"},"resolveModulePath":{"name":"resolveModulePath","description":"Resolve a module path starting from current directory via returned promise."},"_getCallingFileName":{"name":"_getCallingFileName","description":"Calculate the calling filename by examing the stack-trace."},"_getCallingDir":{"name":"_getCallingDir","description":"Calculate the calling directory path by examining the stack-trace."},"_getRoot":{"name":"_getRoot","description":"Get the root directory to use from the supplied object or calculate it."},"_getResolve":{"name":"_getResolve","description":"Get the resolver object from a given object.  Assumes it has received\neither an actual resolver or an options object with resolver in it.  If this\nis not true then return the default resolver."},"_makeArray":{"name":"_makeArray","description":"Return given value as array.  If already an array, just return as-is.\nUndefined will return an empty array."},"getModule":{"name":"getModule","description":"Load a module or return a default value.  Can take an array to try.  Will\nload module asynchronously."},"_loadModuleText":{"name":"_loadModuleText","description":"Read text from a file and handle any errors."},"_evalModuleText":{"name":"_evalModuleText","description":"Evaluate module text in similar fashion to require evaluations."},"_loadModule":{"name":"_loadModule","description":"Load and evaluate a module returning undefined to promise resolve\non failure."},"_loadModuleSync":{"name":"_loadModuleSync","description":"This is a sychronous version of loadModule.  The module is still resolved\nusing async methods but the actual loading is done using the native require\nfrom node.\n\nLoad and evaluate a module returning undefined to promise resolve\non failure."},"_loader":{"name":"_loader","description":"Load a module"},"_requireX":{"name":"_requireX","description":"Load a module asynchronously, this is an async version of require().  Will\nload a collection of modules if an array is supplied.  Will reject if module\nis not found or on error."},"requireAsync":{"name":"requireAsync","description":"Load a module asynchronously, this is an async version of require().  Will\nload a collection of modules if an array is supplied.  Will reject if module\nis not found or on error."},"_requireSync":{"name":"_requireSync","description":"Load a module asynchronously, this is an async version of require().  Will\nload a collection of modules if an array is supplied.  Will reject if module\nis not found or on error.\n\nThis version still uses the native require() from node but resolves the path\nusing async methodology."},"_filesInDirectory":{"name":"_filesInDirectory","description":"Get a list of files in the directory."},"_getFileName":{"name":"_getFileName","description":"Take a file path and return the filename (without an extension).  Possible\nextensions are passed in or the module default is used."},"_getExtensionRegEx":{"name":"_getExtensionRegEx","description":"Get a regular expression for the given selection of file extensions, which\nwill then be able to match file paths, which have those extensions."},"_getFileTests":{"name":"_getFileTests","description":"Get the extension names for a given filename"},"_canImport":{"name":"_canImport","description":"Can a filename be imported according to the rules the suppllied options."},"importDirectory":{"name":"importDirectory","description":"Import an entire directory (excluding the file that does the import if it is\nin the same directory)."},"getResolver":{"name":"getResolver","description":"Generate a new resolver object following specific rules defined in the\noptions parameter. If no options are supplied, return a default resolver."},"module:require-extra":{"name":"require-extra","description":"NodeJs module loading with an asynchronous flavour"},"package:undefined":{}}